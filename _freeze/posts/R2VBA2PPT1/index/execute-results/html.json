{
  "hash": "141ffc02ec4805e1869bcdbc390ee55c",
  "result": {
    "markdown": "---\ntitle: \"Unholy Trinity of R, Excel VBA and Powerpoint - Part 1 of 2\"\nsubtitle: \"Using R to trigger Excel VBA macros to create PowerPoint presentations!\"\nabstract: \"This post demonstrates how to create a PowerPoint template based off your custom/corporate Presentation/Report and VBA-enabled Excel file that would populate the report.\"\nauthor: Vishal Katti\ndate: 2021-10-19\nimage: images/R2XL2PPT_logo.png\ncategories: [R, Excel, VBA, PowerPoint]\ncitation: true\nlicense: \"CC BY\"\nfilters:\n  - social-share\nshare:\n  permalink: \"https://vishalkatti.com/posts/R2VBA2PPT1\"\n  description: \"Check out Part 1 on running VBA Macros in Excel from R\"\n  twitter: true\n  facebook: true\n  reddit: true\n  stumble: false\n  tumblr: false\n  linkedin: true\n  email: true\n---\n\n\n\n\nOne of the most common tasks in most offices, is creating presentations and reports in Microsoft PowerPoint. While the tool is great for creating ad-hoc presentations, editing the same with new data on a periodic basis gets tedious. Now, I know that some wonderful packages like `officer` and `officedown` exist that enable us to create PowerPoint presentations with editable charts from R itself. You can read all about this in the amazing [Alison Hill's blog post \"Up and running with officedown\"](https://alison.rbind.io/blog/2021-07-officedown/).\n\nSince I discovered R while looking for a better alternative to VBA for data analysis and Excel/PowerPoint automation, the following is an alternative workflow to create multiple PowerPoint presentations using a combination of these technologies. Note that this workflow uses the `RDCOMClient` package which works in Windows environment only.\n\n## TL;DR\n\nIn this 2-part blog, we create a PowerPoint template with named placeholders which we populate from an Excel file using VBA. The Excel file is loaded with data using R with the help of `openxlsx` package and then the macro is triggered using the `RDCOMClient` package.\n\nThis solution has great potential to give you the same feeling as those Jurassic Park scientists that Dr. Ian Malcolm remarked about!\n\nAdvantages of this approach over `officer` and `officedown`:\n\n1.  Slide/content/header/footer formatting control is in the PowerPoint template rather than R code.\n2.  All charts are native and can contain any feature (dual axis, mixed data series like bar + line, line + points). All Excel chart-types are available. Go wild!\n3.  You can use any PowerPoint template design (Yes, even your sad/weird/exciting corporate template!).\n\nLet's begin.\n\nSuppose we want to automate the following PowerPoint presentation. It contains 3 slides with a title slide and 2 content slides having graphs and tables created from the `gapminder` dataset. This `.pptx` file also has a custom footer.\n\n::: {style=\"text-align:center;\"}\n![The Gapminder World Population Report. Note the custom footer!](https://i.imgur.com/LL6UwWH.gif \"The Gapminder World Report\"){#fig-gapminder}\n:::\n\nWe want to create the same presentation with same structure but at a continent-level. `gapminder` has data for 5 continents and we wish to create 5 presentations by the end of this.\n\n## The PowerPoint Template\n\nIn this approach, we start with the PowerPoint presentation file. We will create a template with placeholders and charts with dummy data.\n\n::: {style=\"text-align:center;\"}\n![Save As PowerPoint Template (.potx)](https://i.imgur.com/NvdILBA.png \"Save As PowerPoint Template (.potx)\"){#fig-potx}\n:::\n\nUsually, you would have a copy of the `.pptx` file you want to automate. Save a copy of it as a `PowerPoint Template (.potx)`, ideally to your R Project^[**What is an R Project?**  \n*https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects*] folder. In my case, I've created a new R Project folder named `R2XL2PPT` as shown in @fig-potx.\n\n\nNow let us prep the template. If you open the template file by double-click or right-click \\> New, it would open a fresh `.pptx` presentation using the template. Right-Click and click Open in the context menu to open the `.potx` template file for editing.\n\n::: {style=\"text-align:center;\"}\n![CORRECT: Right-Click \\> Open](https://i.imgur.com/eQokXoX.png){#fig-open}\n:::\n\nOnce you have the template open, we will add names to all the text placeholders, tables and graphs we wish to update. To update the placeholder name:\n\n1.  Select the shape/text-area/table/graph.\n2.  From Shape Format, click Selection Pane.\n3.  In the Selection Pane, change the name of the selected item.\n\n::: {style=\"text-align:center;\"}\n![Add shape names from Selection Pane](https://i.imgur.com/xhA0D3u.png \"Add shape names from Selection Pane\"){#fig-add-shapes}\n:::\n\n::: callout-tip\n## Advisory\n\nWe use the format `NN_[Position]Object` where `NN` is the slide number, `[Position]` is the either TopLeft, TopRight, BottomLeft, BottomRight or any other position and finally, `Object` is either Table, Chart, Title, Subtitle, TextBox etc. You can use any fancy identifier here, just make sure that your future self and others can recognise them easily.\n:::\n\nOnce you set the names of all the items that you want to customise, save the template.\n\nDownload the `GP_template.potx` template [here](content/GP_template.potx).\n\n## The Excel Template\n\n::: {style=\"text-align:center;\"}\n![PowerPoint item to Excel named range mapping](https://i.imgur.com/A080o1Z.png \"PowerPoint item to Excel named range mapping\"){#fig-mapping}\n:::\n\nTo populate all the named items in the PowerPoint template, we will now create an Excel document which looks identical to the template with respect to the named items. Please see @fig-mapping.\n\nFor every named item, depending on whether it is a textbox or chart or table, we will create a named range for that item. For example, for item `01_title` in the PowerPoint template, we create a `S1_title` named range^[**What is a Named Range in Excel?**\n*https://support.microsoft.com/en-us/office/define-and-use-names-in-formulas-4d0f13ac-53b7-422e-afd2-abd7ff379c64*] (which points to cell C3) as a placeholder for it.\n\n::: callout-warning\nExcel does not allow the names of the named ranges to start with a number, hence `01_title` is mapped to `S1_title`. The S stands for Slide. Just one of those Excel quirks I guess!\n:::\n\nYou can set a single Excel cell as named range for each **textbox** in the PowerPoint template. You can copy-paste **tables** from Powerpoint to the Excel template directly. The entire table must be set as a named range.\n\n::: {style=\"text-align:center;\"}\n![Excel Chart: Right Click \\> Edit Data](https://i.imgur.com/rVsb1a6.png \"Excel Chart: Right Click > Edit Data\"){#fig-charts width=\"70%\"}\n:::\n\nFor charts, right-click the chart in PowerPoint and select `Edit Data`. See @fig-charts. An excel worksheet is displayed with the underlying data. Copy-paste the entire data into the Excel template.\n\n::: {style=\"text-align:center;\"}\n![XL2PPT design](https://i.imgur.com/oMdSUvp.png \"XL2PPT design\"){#fig-xlsm}\n:::\n\nFor the `GP_template.potx`, the corresponding excel template `XL2PPT.xlsm` is shown in @fig-xlsm. Please note that this template does not have the VBA macro yet.\n\n## The VBA Macro\n\nWe want the VBA macro to:\n\n1.  Open a new instance of PowerPoint presentation using the `GP_template.potx` file.\n2.  Copy text/numbers from various placeholders and replace existing text/numbers in the PowerPoint presentation.\n3.  Save the presentation with custom file name with `.pptx` extension.\n\nThe actual mapping of the named ranges in the Excel template to the named shapes in the PowerPoint template happens in the VBA code. However, at this stage, you can actually create the PowerPoint presentation by copying the numbers into the Excel template and hitting the big `RUN MACRO` button.\n\nFor your reference, I am embedding the VBA macro code below. You can download the `XL2PPT.xlsm` file from [here](content/XL2PPT.xlsm).\n\n\n::: {.cell}\n::: {.cell-output-display}\n<details closed>\n<summary> <span title='Click to Expand'> VBA Macro Code </span> </summary>\n\n\n\n<script src=\"https://gist.github.com/vkatti/6b62c49c7dac8901b0194a758a77c0df.js\"></script>\n\n\n\n</details>\n<br>\n:::\n:::\n\n\n## R\n\nSuppose we want to create a 10 variations of PowerPoint presentation using the same template. While creating the presentation from Excel is now automated, how about creating the numbers for each of those 10 variations? This is where we bring in R with the `openxlsx` and `RDCOMClient` packages. We use the `tidyverse` set of packages to read in data, clean and massage the data into the various formats we need, `openxlsx` to write the data (single numbers, text or tables of numbers) to the Excel template and `RDCOMClient` to run the embedded VBA code in the Excel template.\n\nCheck out [Part 2](https://vishalkatti.com/posts/R2VBA2PPT2/) of this blog to see how to run VBA code using R. Let me know if you find this useful or any corrections required in the comments below.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}